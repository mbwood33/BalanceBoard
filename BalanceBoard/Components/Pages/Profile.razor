@page "/profile"

@inject NavigationManager Navigation    /* Injects the NavigationManager service for page navigation */
@inject BalanceBoard.Services.DatabaseService dbService    /* Injects the DatabaseService for data operations (will be replaced by Identity) */
@inject BalanceBoard.Services.UserSessionService userSessionService   /* Injects the UserSessionService to get the current user's ID (will be replaced by Identity) */

@using BalanceBoard.Models // Updated namespace
@using Syncfusion.Blazor.Inputs // For Syncfusion textboxes and numeric textboxes
@using Syncfusion.Blazor.Calendars // For Syncfusion date picker
@using Syncfusion.Blazor.Buttons // For Syncfusion buttons
@using Microsoft.AspNetCore.Components.Forms // For EditForm and validation components
@using Microsoft.AspNetCore.Components.Authorization // Required for [Authorize] attribute later

@*
    Profile.razor
    ---------------------------------------------------------------------------
    This page allows a logged-in user to view and edit their profile information,
    such as name, date of birth, and height.
    It uses Bootstrap classes for styling and interacts with the DatabaseService
    for data persistence (this will be updated to use ASP.NET Core Identity later).
*@



@code {
    private RegisterModel userProfile = new RegisterProfile();  // Model to hold the user's profile data for display and editing
    private string message = string.Empty;  // Message string to display feedback to the user (e.g., "Profile updated successfully!")
    private bool isEditing = false;     // Flag to control whether the profile is being displayed (false) or edited (true)

    /// <summary>
    /// Called when the component is initialized.
    /// Retrieves the currently logged-in user's profile information from the database.
    /// Requires the user to be authenticated.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Ensure a user is logged in before attempting to fetch their profile
        // In the future, with ASP.NET Core Identity, we would get the authenticated user here.
        if (userSessionService.CurrentUserId > 0)
        {
            int userId = userSessionService.CurrentUserId;
            // Retrieve user information from the DatabaseService
            var userInfo = dbService.GetUserById(userId);
            if (userInfo != null)
            {
                // Populate the userProfile model with the retrieved data
                userProfile = userInfo;
            }
            else
            {
                // Handle the case where the user profile is not found (unexpected if userSessionService has an ID)
                message = "Error loading user profile. Profile data not found.";
                // Consider redirecting to an error page or dashboard.
            }
        }
        else
        {
            // Handle the case where no user is logged in (e.g., if the [Authorize] attribute didn't prevent access)
            // The [Authorize] attribute should prevent unauthenticated access, but this is a fallback.
            message = "Please log in to view your profile.";
            // Navigation.NavigateTo("/Login"); // Optionally redirect to the login page
        }

        // Note: StateHasChanged is often needed after asynchronous operations or data loading
        // if the data impacts the UI and wasn't triggered by a user event.
        // It's good practice to call it explicitly here after loading initial data.
        StateHasChanged();

        // Return a completed task as this method is async but doesn't have awaits related to I/O
        await Task.CompletedTask;
    }

    /// <summary>
    /// Handles the submission of the profile edit form.
    /// Validates the updated user information and attempts to save it to the database.
    /// Displays a success or error message and exits edit mode.
    /// </summary>
    private void HandleProfileUpdate()
    {
        // Ensure user is logged in before attempting to update.
        if (userSessionService.CurrentUserId <= 0)
        {
            message = "Error: No user logged in to update profile.";
            return;
        }

        // Update the user's information in the database using the DatabaseService.
        // This custom update logic will be replaced by ASP.NET Core Identity's UserManager.UpdateAsync.
        bool updated = dbService.UpdateUser(userProfile, userSessionService.CurrentUserId);

        // Set the status message based on the update result
        message = updated ? "Profile updated successfully!" : "Error updating profile. Please try again.";

        // Exit edit mode after the update attempt.
        isEditing = false;

        // Refresh the UI to show the updated information (or the original if update failed).
        // In a real application, you might refetch the user data from the DB after a successful update.
        StateHasChanged();
    }

    /// <summary>
    /// Cancels the profile editing process
    /// Resets any unsaved changes by reloading the original user data from the database
    /// Exits edit mode
    /// </summary>
    private void CancelEditing()
    {
        // Reload the user's original information from the database to discard unsaved changes
        int userId = userSessionService.CurrentUserId;
        var userInfo = dbService.GetUserById(userId);
        if (userInfo != null)
        {
            // Populate the userProfile model with the original data
            userProfile = userInfo;
        }
        else
        {
            // Handle case where profile couldn't be reloaded
            message = "Error reloading original profile data.";
            // Keep the current unsaved changes in the form or handle as needed
        }

        // Exit edit mode
        isEditing = false;

        // Refresh the UI to show the original data
        StateHasChanged();
    }
}
