@page "/Register"
@inject BalanceBoard.Services.DatabaseService dbService     /* Injects the database service */
@inject NavigationManager Navigation
@using BalanceBoard.Models
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Buttons
@using Microsoft.AspNetCore.Components.Forms

@*
    Register.razor
    ---------------------------------------------------------------------------
    This page allows new users to register for an account.
    It collects user information, validates the input, and creates a new user
    record in the database (using the custom service for now). Uses Bootstrap for styling.
*@

<PageTitle>BalanceBoard Register</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6"> @* Adjusted column widths for better centering on different screen sizes *@
            <div class="card shadow-lg border-success"> @* Added a success color border and stronger shadow *@
                <div class="card-header bg-success text-white text-center"> @* Centered header text *@
                    <h3 class="card-title mb-0">Create a BalanceBoard Account</h3>
                </div>
                <div class="card-body">
                    @* Blazor EditForm for handling form submission and validation *@
                    <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
                        @* Validation components *@
                        <DataAnnotationsValidator />    @* Enables data annotations validation on the model *@
                        <ValidationSummary class="alert alert-danger" />    @* Displays validation message using Bootstrap alert style *@

                        @* Email Input Field *@
                        <div class="mb-3">  @* Margin bottom *@
                            <label for="email" class="form-label">Email address</label> @* Bootstrap form label *@
                            @* Syncfusion TextBox with Bootstrap form-control class *@
                            <SfTextBox @bind-Value="registerModel.Email" Id="email" Placeholder="Enter your email" CssClass="form-control" />
                            @* Displays validation message for the Email field *@
                            <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
                        </div>

                        @* Password Input Field *@
                        <div class="mb-3">  @* Margin bottom *@
                            <label for="password" class="form-label">Password</label> @* Bootstrap form label *@
                            @* Syncfusion TextBox configured for password input *@
                            <SfTextBox @bind-Value="registerModel.Password" Id="password" Placeholder="Choose a password" CssClass="form-control" Type="InputType.Password" />
                            @* Displays validation message for the Password field *@
                            <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
                        </div>

                        @* Name Input Field *@
                        <div class="mb-3">  @* Margin bottom *@
                            <label for="name" class="form-label">Your Name</label> @* Bootstrap form label *@
                            @* Syncfusion TextBox with Bootstrap form-control class *@
                            <SfTextBox @bind-Value="registerModel.Name" Id="name" Placeholder="Enter your name" CssClass="form-control" />
                            @* Displays validation message for the Name field *@
                            <ValidationMessage For="@(() => registerModel.Name)" class="text-danger" />
                        </div>

                        @* Date of Birth Input Field *@
                        <div class="mb-3">  @* Margin bottom *@
                            <label for="dob" class="form-label">Date of Birth</label> @* Bootstrap form label *@
                            @* Syncfusion DatePicker with Bootstrap form-control class *@
                            <SfDatePicker TValue="DateTime?" @bind-Value="registerModel.DateOfBirth" Id="dob" Placeholder="Select your date of birth" CssClass="form-control" />
                            @* Displays validation message for the DateOfBirth field *@
                            <ValidationMessage For="@(() => registerModel.DateOfBirth)" class="text-danger" />
                        </div>

                        @* Height Input Field (inches) *@
                        <div class="mb-4">  @* Increased margin bottom slightly *@
                            <label for="height" class="form-label">Height (inches)</label> @* Bootstrap form label, added units *@
                            @* Syncfusion NumericTextBox with Bootstrap form-control class *@
                            <SfNumericTextBox TValue="decimal?" @bind-Value="registerModel.Height" Id="height" Placeholder="Enter your height in inches" CssClass="form-control" ShowSpinButton="false" />
                            @* Displays validation message for the Height field *@
                            <ValidationMessage For="@(() => registerModel.Height)" class="text-danger" />
                        </div>

                        @* Register Button *@
                        <div class="d-grid gap-2">  @* Creates a grid for buttons for full width *@
                            @* Syncfusion Button with Bootstrap success button class and full width *@
                            <SfButton Type="Submit" CssClass="btn btn-success btn-lg">
                                <span class="bi bi-person-plus me-2" aria-hidden="true"></span> Register
                            </SfButton>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private RegisterModel registerModel = new();    // Model to bind input values to
    private string message = string.Empty;          // Message string to display feedback to the user

    /// <summary>
    /// Handles user registration when the form is validly submitted.
    /// Validates input data, attempts to create a new user in the database
    /// using the DatabaseService (this will be replaced by Identity).
    /// Displays success or error message and redirects to the login page on success.
    /// </summary>
    private async Task HandleRegister()
    {
        // Basic check for nullable required fields (Data Annotations should also handle this)
        if (registerModel.DateOfBirth == null || registerModel.Height == null)
        {
            message = "Please fill in all required fields.";
            return;
        }

        // Attempt to create the user in the database using the DatabaseService
        // This custom user creation logic will be replaced by ASP.NET Core Identity's UserManager.CreateAsync.
        bool created = dbService.CreateUser(
            registerModel.Email,
            registerModel.Password, // Note: Storing plaintext password - this is for demo purposes only. Identity handles hashing.
            registerModel.Name,
            registerModel.DateOfBirth,
            registerModel.Height
        );

        // Check if the user was created successfully.
        if (created)
        {
            message = "Account created successfully! Redirecting to login...";
            // Wait for a short period to allow the user to read the success message.
            await.Task.Delay(1500);
            // Redirect the user to the login page
            Navigation.NavigateTo("/login");
        }
        else
        {
            // Display an error message if user creation failed (e.g., email already exists)
            message = "Registration failed. A user with this email may already exist.";
        }
    }
}
